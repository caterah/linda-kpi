<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:controller="controller.*" 
		  xmlns:control="control.*">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<!-- Define custom colors for use as pie wedge fills. -->
		<mx:SolidColor id="sc1" color="blue" alpha=".6"/>
		<mx:SolidColor id="sc2" color="red" alpha=".6"/>
		<mx:SolidColor id="sc3" color="0x663300" alpha=".6"/>
		
		<!-- This Stroke is used for the callout lines. -->
		<mx:SolidColorStroke id="callouts" weight="2" color="0x999999" alpha=".8" caps="square"/>
		
		<!-- This Stroke is used to separate the wedges in the pie. -->
		<mx:SolidColorStroke id="radial" weight="1" color="0xFFFFCC" alpha=".3"/>
		
		<!-- This Stroke is used for the outer border of the pie. -->
		<mx:SolidColorStroke id="pieborder" color="0x000000" weight="2" alpha=".5"/>
		
		<!-- Define custom Strokes. -->
		<mx:SolidColorStroke id = "s1" color="blue" weight="2"/>
		<mx:SolidColorStroke id = "s2" color="red" weight="2"/>
		<mx:SolidColorStroke id = "s3" color="green" weight="2"/>

	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			
			import spark.events.GridEvent;
			
			import controller.Controller;
			import controller.data.JobData;
			import controller.data.PartData;
			private var _data:Controller;
			
			private var _comps:Array;
			
			private var _nameDict:Dictionary;
			
			private var _jobs:Array;
			
			public function setData(data:Controller):void 
			{
				_data=data;
				var recrus:XMLList=_data.data.recruitment;
				var size:int=recrus.length();
				var xml:XML;
				_nameDict=new Dictionary();
				var key:String;
				for(var i:uint=0;i<size;i++)
				{
					xml=recrus[i];
					key=xml.job[0];
					if (_nameDict[key]==null) {
						_nameDict[key]=new JobData();
					}
					JobData(_nameDict[key]).name=key;
					JobData(_nameDict[key]).addPoint(xml.id[0],xml.name[0],xml.months[0],calc(xml));
				}
				
				_jobs=[];
				for (key in _nameDict) {
					_jobs.push(_nameDict[key]);
				}
				
				recruList.dataProvider=new ArrayCollection(_jobs);
				linechartAverage.dataProvider=new ArrayCollection(_jobs);
				linechartMax.dataProvider=new ArrayCollection(_jobs);
				linechartMin.dataProvider=new ArrayCollection(_jobs);
//				Areachart.dataProvider=new ArrayCollection(_jobs);
			}
			
			protected function onGridClick(event:GridEvent):void
			{
				var r:XML=_data.data.recruitment[recruList.selectedIndex];
				calc(r);
			}
			
			private function calc(r:XML):int 
			{
				_comps=[];
				var total:Number=0;
				total=calcLocation(r,total);
				total=calcResumes(r,total);
				total=calcInterview(r,total);
				total=calcEducation(r,total);
				total=calcSpecial(r,total);
				total=calcTech(r,total);
				total=calcJob(r,total);
				total=calcOffer(r,total);
				total=calcExp(r,total);
				total=calcGrade(r,total);
				total=calcCategory(r,total);
				total=calcTime(r,total);
				return total;
			}
			
			
			protected function calcLocation(r:XML,input:Number):Number 
			{
				var loca:String=r.location[0];
				var calc:Number=input+_data.opreation.location.getValue(loca);
				return calc;
			}
			
			protected function calcResumes(r:XML,input:Number):Number 
			{
				var resumeCount:int=r.resumes[0];
				var calc:Number=input+_data.opreation.resume.getResult(resumeCount);
				return calc;
			}
			
			protected function calcInterview(r:XML,input:Number):Number 
			{
				var interveiwCount:int=r.interview[0];
				var calc:Number=input+_data.opreation.interview.getResult(interveiwCount);
				return calc;
			}
			
			protected function calcEducation(r:XML,input:Number):Number
			{
				var edu:int=r.education[0];
				var calc:Number=input+_data.opreation.education.getResult(edu);
				return calc;
			}
			
			protected function calcSpecial(r:XML,input:Number):Number
			{
				var s:XML=r.special[0];
				var calc:Number=input+_data.opreation.special.getMultiValues(s);
				return calc;
			}
			
			protected function calcTech(r:XML,input:Number):Number
			{
				var tech:XML=r.tech[0];
				var calc:Number=input+_data.opreation.tech.getTech(tech);
				return calc;
			}
			
			protected function calcJob(r:XML,input:Number):Number
			{
				var job:XML=r.job[0];
				var calc:Number=input+_data.opreation.jobTitle.getValue(job);
				return calc;
			}
			
			protected function calcOffer(r:XML,input:Number):Number
			{
				var o:int=r.offer[0];
				var calc:Number=input+_data.opreation.offer.getResult(o);
				return calc;
			}
			
			protected function calcExp(r:XML,input:Number):Number
			{
				var e:int=r.exp[0];
				var calc:Number=input*(1+_data.opreation.exp.getResult(e));
				return calc;
			}
			
			protected function calcGrade(r:XML,input:Number):Number
			{
				var g:int=r.grade[0];
				var calc:Number=input*(1+_data.opreation.grade.getResult(g));
				return calc;
			}
			
			protected function calcCategory(r:XML,input:Number):Number
			{
				var c:String=r.category[0];
				var calc:Number=input*_data.opreation.category.getValue(c);
				return calc;
			}
			
			protected function calcTime(r:XML,input:Number):Number
			{
				var calc:Number=input;
				return calc;
			}
			
			private function displayPoint(data:PartData, field:String, index:Number, percentValue:Number):String {
				var temp:String= (" " + percentValue).substr(0,6);
				return data.title + ": " + '\n' + "影响到的点数: " + data.differ + '\n' + temp + "%";
			}
			
			
		]]>
	</fx:Script>
	<s:VGroup width="400" height="100%">
		<s:DataGrid id="recruList" width="100%" height="100%" gridClick="onGridClick(event)">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn dataField="name" headerText="职位名称" width="220"/>
					<s:GridColumn dataField="average" headerText="平均点数"/>
					<s:GridColumn dataField="months" headerText="月数"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
	</s:VGroup>
	<s:HGroup width="100%" height="100%" verticalAlign="bottom">
		<s:BorderContainer width="100%" height="100%">
			<s:HGroup id="average" width="100%" height="100%" visible="true">
				<mx:LineChart id="linechartAverage" height="100%" width="100%"
							  paddingLeft="5" paddingRight="5" 
							  showDataTipTargets="true"
							  showDataTips="true" showAllDataTips="false">
					
					<mx:horizontalAxis>
						<mx:CategoryAxis categoryField="name"/>
					</mx:horizontalAxis>
					
					<mx:series>
						<mx:LineSeries yField="average" form="curve" displayName="平均值" lineStroke="{s1}"/>
					</mx:series>
				</mx:LineChart>
				<mx:Legend dataProvider="{linechartAverage}"/>
			</s:HGroup>
			<s:HGroup id="max" width="100%" height="100%" visible="false">
				<mx:LineChart id="linechartMax" height="100%" width="100%"
							  paddingLeft="5" paddingRight="5"
							  showDataTips="true" showAllDataTips="true">
					
					<mx:horizontalAxis>
						<mx:CategoryAxis categoryField="name"/>
					</mx:horizontalAxis>
					
					<mx:series>
						<mx:LineSeries yField="max" form="curve" displayName="最大值" lineStroke="{s2}"/>
					</mx:series>
				</mx:LineChart>
				<mx:Legend dataProvider="{linechartMax}"/>
			</s:HGroup>
			<s:HGroup id="min" width="100%" height="100%" visible="false">
				<mx:LineChart id="linechartMin" height="100%" width="100%"
							  paddingLeft="5" paddingRight="5"
							  showDataTips="true" showAllDataTips="true">
					
					<mx:horizontalAxis>
						<mx:CategoryAxis categoryField="name"/>
					</mx:horizontalAxis>
					
					<mx:series>
						<mx:LineSeries yField="min" form="curve" displayName="最小值" lineStroke="{s3}"/>
					</mx:series>
				</mx:LineChart>
				<mx:Legend dataProvider="{linechartMin}"/>
			</s:HGroup>
		</s:BorderContainer>
	</s:HGroup>
</s:HGroup>